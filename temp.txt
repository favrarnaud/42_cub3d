	t_vec	start_vec;
	t_vec	ray_vec;
	double	distance;
	double	wall_height;
	int 	color;

	start_vec.x = data->ray.x;
	start_vec.y = data->ray.y;
	ray_vec.x = data->ray.x;
	ray_vec.y = data->ray.y;
	float cosV = cos(degree_to_radians(angle)) / data->ray.precision;
	float sinV = sin(degree_to_radians(angle)) / data->ray.precision;

	while (check_stop(data, ray_vec))
	{
		ray_vec.x += sinV;
		ray_vec.y += cosV;
	}
	distance = sqrt(powf(ray_vec.x - data->ray.x - 0.5, 2.) + powf(ray_vec.y - data->ray.y - 0.5, 2.));
	distance *= cos(degree_to_radians(angle - data->ray.angle));
	wall_height = (data->mlx.screen_height / ( 0.5 * distance));
	color = set_color(define_face(substract_vec(ray_vec, start_vec)));
	render_line(data, iter, data->ray.half_height - (wall_height / 2), data->ray.half_height + (wall_height / 2), color);